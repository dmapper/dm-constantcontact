// Generated by CoffeeScript 1.10.0
(function() {
  var CCClient, moment;

  CCClient = require('constantcontact');

  moment = require('moment');

  module.exports = function(apiKey, accessToken) {
    var _getEventData, createContact, createContactsList, createEvent, getCCClient, getContactsList, updateEvent;
    getCCClient = function() {
      var client;
      client = new CCClient();
      client.useKey(apiKey);
      client.useToken(accessToken);
      return client;
    };
    _getEventData = function(data) {
      var event, eventName;
      eventName = data.hotelLocation + ' ' + data.name;
      event = {
        address: {
          city: data.city,
          postal_code: data.zip,
          state: data.state,
          line1: data.address
        },
        contact: {
          email_address: data.supportEmail,
          name: data.instructorName
        },
        location: data.hotelLocation,
        description: data.description,
        currency_type: "USD",
        start_date: new Date(parseInt(data.start)),
        end_date: new Date(parseInt(data.end)),
        time_zone_id: data.timezone,
        title: eventName,
        name: eventName,
        type: "BUSINESS_FINANCE_SALES"
      };
      if (data.active === 'true') {
        event.status = "ACTIVE";
      } else {
        event.status = "DRAFT";
      }
      return event;
    };
    createEvent = function(data, cb) {
      var event;
      event = _getEventData(data);
      return getCCClient().eventspot.post(event, function(err, postRespose) {
        var patch;
        if (err) {
          cb(err, postRespose);
        }
        if (event.status === 'DRAFT') {
          return cb(err, postRespose);
        }
        patch = [
          {
            "op": "REPLACE",
            "path": "#/status",
            "value": 'ACTIVE'
          }
        ];
        return getCCClient().eventspot.patch(postRespose.id, patch, function(err, patchRespose) {
          return cb(err, postRespose);
        });
      });
    };
    updateEvent = function(data, cb) {
      var event;
      event = _getEventData(data);
      return getCCClient().eventspot.put(data.ccEventId, event, function(err, respose) {
        var patch;
        if (err) {
          return cb(err, respose);
        }
        patch = [
          {
            "op": "REPLACE",
            "path": "#/status",
            "value": event.status === 'ACTIVE' ? 'ACTIVE' : 'CANCELLED'
          }
        ];
        return getCCClient().eventspot.patch(data.ccEventId, patch, function(err, respose) {
          return cb(err, respose);
        });
      });
    };
    createContact = function(data, cb) {
      var contact, countryCode, countryCodes, ref, ref1;
      countryCodes = {
        USA: 'US',
        Canada: 'CA',
        Mexico: 'MX'
      };
      contact = {
        addresses: [
          {
            address_type: 'BUSINESS',
            city: data.city,
            state: data.state,
            postal_code: data.zip
          }
        ],
        cell_phone: data.phone,
        created_date: new Date(),
        company_name: data.company,
        custom_fields: [
          {
            name: 'CustomField1',
            value: (ref = data.seminarAddress) != null ? ref : ''
          }, {
            name: 'CustomField2',
            value: moment(data.start).format('MMM DD, YYYY  hh:mmA ') + moment(data.start).format('hh:mmA')
          }, {
            name: 'CustomField4',
            value: data.seminarInstructorName + ''
          }, {
            name: 'CustomField3',
            value: (ref1 = data.promocodeName) != null ? ref1 : ''
          }, {
            name: 'CustomField5',
            value: data.seminarFee + ''
          }, {
            name: 'CustomField6',
            value: data.total + ''
          }
        ],
        email_addresses: [
          {
            email_address: data.email
          }
        ],
        lists: [
          {
            id: data.ccListId
          }
        ],
        prefix_name: data.salutation,
        first_name: data.firstname,
        last_name: data.lastname,
        job_title: data.title,
        source: 'from spasigma site',
        status: 'ACTIVE'
      };
      if (countryCode = countryCodes[data.country]) {
        contact.addresses[0].country_code = countryCode;
      }
      return getCCClient().contacts.post(contact, true, function(err, respose) {
        return cb(err, respose);
      });
    };
    getContactsList = function(cb) {
      return getCCClient().lists.get(function(err, respose) {
        return cb(err, respose);
      });
    };
    createContactsList = function(name, cb) {
      var list;
      list = {
        created_date: new Date(),
        name: name,
        status: "ACTIVE"
      };
      return getCCClient().lists.post(list, function(err, respose) {
        return cb(err, respose);
      });
    };
    return {
      createEvent: createEvent,
      createContact: createContact,
      getContactsList: getContactsList,
      createContactsList: createContactsList,
      updateEvent: updateEvent
    };
  };

}).call(this);
